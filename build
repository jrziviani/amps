#!/bin/bash

clean() {
    echo "*****************************************"
    echo "** Removing old build                  **"
    echo "*****************************************"
    [[ -d bin ]] && rm -fr bin
    [[ -d .build ]] && rm -fr .build
}

debug() {
    echo "*****************************************"
    echo "** Building debug binaries             **"
    echo "*****************************************"
    local verbose="$1"
    local static="$2"
    mkdir -p .build/debug
    cd .build/debug
    cmake -DCMAKE_BUILD_TYPE=Debug \
          -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
          -Denable-static="$static" ../..

    [[ $? -eq 0 ]] || exit 1
    [[ "$verbose" == 1 ]] && VERBOSE=1 make -j$(nproc) || make -j$(nproc)
    mkdir -p ../../bin/debug
    cp -a bin/* ../../bin/debug
    cd ../..
}

release() {
    echo "*****************************************"
    echo "** Building release binaries           **"
    echo "*****************************************"
    local verbose="$1"
    local static="$2"
    mkdir -p .build/release
    cd .build/release
    cmake -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
          -Denable-static="$static" ../..

    [[ $? -eq 0 ]] || exit 1
    [[ "$verbose" == 1 ]] && VERBOSE=1 make -j$(nproc) || \
                                       make -j$(nproc)
    mkdir -p ../../bin/release
    cp -a bin/* ../../bin/release
    cd ../..
}

coverage() {
    echo "*****************************************"
    echo "** Running test cases                  **"
    echo "*****************************************"
    local static="$1"
    local release="$2"
    local debug="$3"
    local update="$4"

    if [[ $release == 1 ]]; then
        mkdir -p .build/release
        cd .build/release

        [[ -d googletest-build ]] || update="ON"
        [[ -d googletest-src ]] || update="ON"

        cmake -DCMAKE_BUILD_TYPE=Release \
              -Denable-test=ON \
              -Denable-static="$static" \
              -Dupdate-gtest="$update" ../..

        [[ $? -eq 0 ]] || exit 1
        [[ "$verbose" == 1 ]] && VERBOSE=1 make coverage || \
                                           make coverage
        mkdir -p ../../bin/release
        cp -a bin/* ../../bin/release
        cd ../..
    fi

    if [[ $debug == 1 || $release == 0 ]]; then
        mkdir -p .build/debug
        cd .build/debug

        [[ -d googletest-build ]] || update="ON"
        [[ -d googletest-src ]] || update="ON"

        cmake -DCMAKE_BUILD_TYPE=Debug \
              -Denable-test=ON \
              -Denable-static="$static" \
              -Dupdate-gtest="$update" ../..

        [[ $? -eq 0 ]] || exit 1
        [[ "$verbose" == 1 ]] && VERBOSE=1 make coverage || \
                                           make coverage

        mkdir -p ../../bin/debug
        cp -a bin/* ../../bin/debug
        cd ../..
    fi
}

usage() {
    local error="$1"
    local program="$2"
    local option="$3"

    [[ "$error" == 1 ]] && echo "option $option not recognized"
    cat <<-EOF
        Usage: $program [options]

            --rebuild       make a clear build
            --binary        builds binaries
            --clear         delete build artifacts
            --debug         build with debug symbols [default]
            --release       build with optimizations on
            --test          build and run test cases and coverage
            --static        build static library
            --update        update googletest
            --verbose       build verbose mode
EOF
    exit 1
}

just_make() {
    echo "*****************************************"
    echo "** Make                                **"
    echo "*****************************************"
    if [[ -d .build/release ]]; then
        cd .build/release
        make -j$(nproc)
        cp -a bin/* ../../bin/release
        cd ../..
    fi

    if [[ -d .build/debug ]]; then
        cd .build/debug
        make -j$(nproc)
        cp -a bin/* ../../bin/debug
        cd ../..
    fi
}

main() {
    local rebuild=0
    local test=0
    local clear=0
    local debug=0
    local release=0
    local windows=0
    local verbose=0
    local binary=0
    local update="OFF"
    local static="OFF"

    if [[ -z "$1" ]]; then
        just_make
        exit 0
    fi

    while [[ "$1" == --* ]]; do
        local opt="$1"
        shift

        case "$opt" in
            --rebuild)
                rebuild=1
                ;;
            --test)
                test=1
                ;;
            --binary)
                binary=1
                ;;
            --clear)
                clear=1
                ;;
            --debug)
                debug=1
                ;;
            --release)
                release=1
                ;;
            --static)
                static="ON"
                ;;
            --windows)
                windows=1
                export CC=/usr/bin/x86_64-w64-mingw32-gcc
                export CXX=/usr/bin/x86_64-w64-mingw32-g++
                ;;
            --update)
                update="ON"
                ;;
            --verbose)
                verbose=1
                ;;
            --help)
                usage 0 "$0" ""
                ;;
            *)
                usage 1 "$0" "$opt"
                ;;
        esac
    done

    [[ "$rebuild" == 1 || "$clear" == 1 || "$windows" == 1 ]] && clean
    [[ "$test" == 1 ]] && coverage "$static" "$release" "$debug" "$update"

    if [[ "$binary" == 1 ]]; then
        [[ "$release" == 1 || "$rebuild" == 1 ]] && release "$verbose" "$static"
        [[ "$debug" == 1 || "$rebuild" == 1 || "$release" == 0 ]] && debug "$verbose" "$static"
    fi
}

main $@
