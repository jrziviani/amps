#!/bin/bash

CMAKE=/usr/bin/cmake

clean() {
    echo "*****************************************"
    echo "** Removing old build                  **"
    echo "*****************************************"
    [[ -d bin ]] && rm -fr bin
    [[ -d .build ]] && rm -fr .build
    [[ -f compile_commands.json ]] && rm compile_commands.json
}

debug() {
    echo "*****************************************"
    echo "** Building debug binaries             **"
    echo "*****************************************"
    local verbose="$1"
    local static="$2"
    local buildsys="$3"

    # compile static
    if [[ "$static" == 1 ]]; then
        $CMAKE -DCMAKE_BUILD_TYPE=Debug \
               -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
               -Denable-static=ON \
               -G"$buildsys" \
               -DCMAKE_EXPORT_COMPILE_COMMANDS=YES ../../..

        [[ $? -eq 0 ]] || exit 1
        [[ "$verbose" == 1 ]] && VERBOSE=1 cmake --build . || cmake --build .

    # compile dynamic lib
    else
        $CMAKE -DCMAKE_BUILD_TYPE=Debug \
               -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
               -Denable-static=OFF \
               -G"$buildsys" \
               -DCMAKE_EXPORT_COMPILE_COMMANDS=YES ../../..

        [[ $? -eq 0 ]] || exit 1
        [[ "$verbose" == 1 ]] && VERBOSE=1 cmake --build . || cmake --build .
    fi

    cp compile_commands.json ../../..
}

release() {
    echo "*****************************************"
    echo "** Building release binaries           **"
    echo "*****************************************"
    local verbose="$1"
    local static="$2"
    local buildsys="$3"

    # compile static lib
    if [[ "$static" == 1 ]]; then
        $CMAKE -DCMAKE_BUILD_TYPE=Release \
               -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
               -Denable-static=ON \
               -G"$buildsys" \
               -DCMAKE_EXPORT_COMPILE_COMMANDS=YES ../../..

        [[ $? -eq 0 ]] || exit 1
        [[ "$verbose" == 1 ]] && VERBOSE=1 cmake --build . || \
                                           cmake --build .
    # compile dynamic lib
    else
        $CMAKE -DCMAKE_BUILD_TYPE=Release \
               -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
               -Denable-static=OFF \
               -G"$buildsys" \
               -DCMAKE_EXPORT_COMPILE_COMMANDS=YES ../../..

        [[ $? -eq 0 ]] || exit 1
        [[ "$verbose" == 1 ]] && VERBOSE=1 cmake --build . || \
                                           cmake --build .
    fi

    cp compile_commands.json ../../..
}

coverage() {
    echo "*****************************************"
    echo "** Running test cases                  **"
    echo "*****************************************"
    local static="$1"
    local debug="$2"
    local verbose="$3"
    local buildsys="$4"

    [[ -d googletest-build ]] || update="ON"
    [[ -d googletest-src ]] || update="ON"

    if [[ "$debug" == 0 ]]; then
        $CMAKE -DCMAKE_BUILD_TYPE=Release \
               -Denable-test=ON \
               -Denable-static="$static" \
               -G"$buildsys" \
               -Dupdate-gtest="$update" ../../..
    fi

    if [[ $debug == 1 ]]; then
        $CMAKE -DCMAKE_BUILD_TYPE=Debug \
               -Denable-test=ON \
               -Denable-static="$static" \
               -G"$buildsys" \
               -Dupdate-gtest="$update" ../../..
    fi

    [[ $? -eq 0 ]] || exit 1
    [[ "$verbose" == 1 ]] && VERBOSE=1 make coverage || \
        make coverage
}

usage() {
    local error="$1"
    local program="$2"
    local option="$3"

    [[ "$error" == 1 ]] && echo "option $option not recognized"
    cat <<-EOF
        Usage: $program [options]

            --clear         delete build artifacts
            --binary        build binaries
            --test          build (and run) test with coverage
            --debug         debug symbols on (off by default)
            --static        static library (dynamic by default)
            --linux         for Linux
            --windows       for Windows
            --update        update googletest
            --verbose       build verbose mode
            --ninja         build with ninja (unix make by default)
            --help          print this help and exit
EOF
    exit 1
}

just_make() {
    echo "*****************************************"
    echo "** Make                                **"
    echo "*****************************************"
    if [[ -d .build/release ]]; then
        cd .build/release
        cmake --build .
        cp -a bin/* ../../bin/release
        cd ../..
    fi

    if [[ -d .build/debug ]]; then
        cd .build/debug
        cmake --build .
        cp -a bin/* ../../bin/debug
        cd ../..
    fi
}

build_binary() {
    local static="$1"
    local debug="$2"
    local verbose="$3"
    local buildsys="$4"

    [[ "$debug" == 1 ]] && debug "$verbose" "$static" "$buildsys"\
                        || release "$verbose" "$static" "$buildsys"
}

build_test() {
    local static="$1"
    local debug="$2"
    local verbose="$3"
    local buildsys="$4"

    coverage "$static" "$release" "$debug" "$update" "$windows" "$buildsys"
}

main() {
    local test=0
    local clear=0
    local debug=0
    local windows=0
    local linux=0
    local verbose=0
    local binary=0
    local static=0
    local buildsys="Unix Makefiles"
    local update="OFF"

    if [[ -z "$1" ]]; then
        just_make
        exit 0
    fi

    while [[ "$1" == --* ]]; do
        local opt="$1"
        shift

        case "$opt" in
            --test)
                test=1
                ;;
            --binary)
                binary=1
                ;;
            --clear)
                clear=1
                ;;
            --debug)
                debug=1
                ;;
            --static)
                static=1
                ;;
            --linux)
                linux=1
                ;;
            --windows)
                windows=1
                ;;
            --update)
                update="ON"
                ;;
            --ninja)
                buildsys="Ninja"
                ;;
            --verbose)
                verbose=1
                ;;
            --help)
                usage 0 "$0" ""
                ;;
            *)
                usage 1 "$0" "$opt"
                ;;
        esac
    done

    [[ "$clear" == 1 ]] && clean

    if [[ "$buildsys" == "Ninja" ]]; then
        if [[ $(which ninja > /dev/null 2>&1; echo $?) != 0 ]]; then
            echo "Ninja build system not found, using Make instead"
            buildsys="Unix Makefiles";
        fi
    fi

    if [[ "$windows" == 1 ]]; then
        #export CC=/usr/bin/i686-w64-mingw32-gcc
        #export CXX=/usr/bin/i686-w64-mingw32-g++
        #CMAKE=/usr/bin/mingw32-cmake
        CMAKE=cmake
        buildsys="Visual Studio 15 2017"

        if [[ "$binary" == 1 ]]; then
            mkdir -p bin/windows
            mkdir -p .build/windows
            cd .build/windows

            # generate release version
            if [[ "$debug" == 0 ]]; then
                mkdir -p ../../bin/windows/release
                mkdir -p release
                cd release
                build_binary "$static" 0 "$verbose" "$buildsys"
                cd ..
                cp -a release/bin/* ../../bin/windows/release

            # generate debug version
            else
                mkdir -p ../../bin/windows/debug
                mkdir -p debug
                cd debug
                build_binary "$static" 1 "$verbose" "$buildsys"
                cd ..
                cp -a debug/bin/* ../../bin/windows/debug
            fi
            cd ../..
        fi

        if [[ "$test" == 1 ]]; then
            mkdir -p .build/windows
            cd .build/windows

            # generate release version
            if [[ "$debug" == 0 ]]; then
                mkdir -p ../../bin/windows/release
                mkdir -p release
                cd release
                build_test "$static" 0 "$update" "$buildsys"
                cd ..
                cp -a release/bin/* ../../bin/windows/release

            # generate debug version
            else
                mkdir -p ../../bin/windows/debug
                mkdir -p debug
                cd debug
                build_test "$static" 1 "$update" "$buildsys"
                cd ..
                cp -a debug/bin/* ../../bin/windows/debug
            fi
            cd ../..
        fi
    fi

    if [[ "$linux" == 1 ]]; then
        #export CC=/usr/bin/gcc
        #export CXX=/usr/bin/g++
        #CMAKE=/usr/bin/cmake
        CMAKE=cmake

        if [[ "$binary" == 1 ]]; then
            mkdir -p bin/linux
            mkdir -p .build/linux
            cd .build/linux

            # generate release version
            if [[ "$debug" == 0 ]]; then
                mkdir -p ../../bin/linux/release
                mkdir -p release
                cd release
                build_binary "$static" 0 "$verbose" "$buildsys"
                cd ..
                cp -a release/bin/* ../../bin/linux/release

            # generate debug version
            else
                mkdir -p ../../bin/linux/debug
                mkdir -p debug
                cd debug
                build_binary "$static" 1 "$verbose" "$buildsys"
                cd ..
                cp -a debug/bin/* ../../bin/linux/debug
            fi
            cd ../..
        fi

        if [[ "$test" == 1 ]]; then
            mkdir -p bin/linux
            mkdir -p .build/linux
            cd .build/linux

            # generate release version
            if [[ "$debug" == 0 ]]; then
                mkdir -p ../../bin/linux/release
                mkdir -p release
                cd release
                build_test "$static" 0 "$update" "$buildsys"
                cd ..
                cp -a release/bin/* ../../bin/linux/release

            # generate debug version
            else
                mkdir -p ../../bin/linux/debug
                mkdir -p debug
                cd debug
                build_test "$static" 1 "$update" "$buildsys"
                cd ..
                cp -a debug/bin/* ../../bin/linux/debug
            fi
            cd ../..
        fi
    fi
}

main $@
